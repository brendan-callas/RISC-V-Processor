//Pseudocode for Forwarding/Hazard Module


/********* forwarding for rs1mux *********/

//the if/else flow here is so that if there is a dependency with both stages, the most recent value will be used

/* we are checking:
* if we load the regfile in a previous instruction
* if that register is NOT R0
* if the register being loaded is the same as the one being used in the "current" stage (current is ID/EX).
*/

if (control_word_ex_mem.load_regfile and (instruction_decoded_ex_mem.rd != 0) and (instruction_decoded_ex_mem.rd != instruction_decoded_id_ex.rs1))
  rs1mux_sel = ex_mem_forwarded_out //from EX/MEM stage
  
else if (control_word_mem_wb.load_regfile == 1 and (instruction_decoded_mem_wb.rd != 0) and (instruction_decoded_mem_wb.rd = instruction_decoded_id_ex.rs1))
  rs1mux_sel = regfilemux_out //from MEM/WB stage

// Do the same with rs2mux. Omitting this in the pseudocode for simplicity.
  
  
  
/******** Stalling Logic ***********/
  
// When we have a cache miss on either instruction or data, we want to stall the pipeline until memory responds
// If there is a data hazard involving a load, we also want to stall until the data is ready.
  
if ( (instr_mem_read and ~instr_mem_resp) or (data_mem_read and ~data_mem_resp) or (data_mem_write and ~data_mem_resp) )
    stall_everything = 1

  
// loading hazards
// The first line tests to see if the instruction is a load: the only instruction that reads
// data memory is a load. The next two lines check to see if the destination register
// field of the load in the EX stage matches either source register of the instruction
// in the ID stage. If the condition holds, the instruction stalls one clock cycle.
if (control_word_id_ex.data_mem_read and ((instruction_decoded_id_ex.rd == instruction_decoded_if_id.rs1) or (instruction_decoded_id_ex.rd == instruction_decoded_if_id.rs2)))
 	stall_pc = 1
  stall_if_id = 1
  stall_id_ex = 1
  
// stall_pc: don't load pc reg
// stall_if_id: don't load IF/ID stage registers
// stall_id_ex: override control word outputs with 0 (don't erase data in registers; just use a mux to output 0s instead of values)
// stall_ex_mem: don't load EX/MEM registers. Still want to assert mem_read/mem_write (if stalling due to a cache miss)
// stall_mem_wb: don't load MEM/WB registers (except mem_data_out??). Probably don't load_regfile, although this probably doesn't actually make a difference
    
  
